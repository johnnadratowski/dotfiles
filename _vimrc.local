
" Settings {

    " Spell Check
    set nospell
    set wrap

    " Folding
    "set foldmethod=syntax 
    "set foldnestmax=3 
    "set nofoldenable

    "set guifont=Hack\ 13
    set wildignore+=**/build/**,**/dist/**
    "let g:bundles = []

    "verbose set iskeyword
    let g:indent_guides_enable_on_vim_startup = 0
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
    set iskeyword-=_                    " '_' is an end of word designator

    autocmd BufEnter * colorscheme molokai
" }


" Key Remaps {
"
"
    " Load current file with ,L
    nnoremap <leader>L :so %<CR>

    " Search for word under cursor
    nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

    " Space to toggle folding
    " nnoremap <space> za

    " Space to run macros
    nnoremap <Space> @

    " Fixes stupid thing where escape doesn't go to normal mode when popup is
    " visible
    inoremap <expr> <Esc> "<Esc>"

    map <C-t> :TagbarOpenAutoClose<CR>
" }

" Bash Stuff {
    au FileType sh setl ts=4 sts=4 noet
" }


" Go Stuff {
    " Create go tag file on save
    autocmd BufWritePost *.go call UpdateGoTags("app", "lib")

    let g:go_fmt_command = "goimports"
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    "let g:go_snippet_engine = "neosnippet"

    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }
    
    autocmd FileType go setl ts=8 sw=8 sts=8

    au FileType go nmap <leader>ou <Plug>(go-run)
    au FileType go nmap <leader>ob <Plug>(go-build)
    au FileType go nmap <leader>oi <Plug>(go-install)
    au FileType go nmap <leader>ot <Plug>(go-test)
    au FileType go nmap <leader>on <Plug>(go-info)
    au FileType go nmap <leader>ov <Plug>(go-vet)
    au FileType go nmap <leader>ol <Plug>(go-lint)
    au FileType go nmap <leader>od <Plug>(go-doc)
    au FileType go nmap <leader>og <Plug>(go-def)
    au FileType go nmap <leader>or <Plug>(go-rename)
    au FileType go nmap <leader>oe :GoErrCheck<CR>
    au FileType go nmap <leader>om :GoImport 
" }


" Python Stuff {
    au FileType python setl ts=4 et sw=4 sts=4 isk+=_ expandtab autoindent fileformat=unix
" }

" JS Stuff {
    au FileType javascript setl sw=2 sts=2 et isk-=.
    au FileType jsx setl sw=2 sts=2 et isk-=.
    
    let g:js_fmt_fail_silently = 1
    let g:js_fmt_autosave = 0
" }

" Markdown Stuff {
let g:previm_open_cmd = 'open -a Google\ Chrome'
"

" Plugin Stuff {

    """ Slime

	let g:slime_target = "tmux"
    let g:slime_python_ipython = 1
	let g:slime_no_mappings = 1
	xmap <leader>s <Plug>SlimeRegionSend
	nmap <leader>s <Plug>SlimeMotionSend
	nmap <leader>ss <Plug>SlimeLineSend

    """ Airline
    let g:airline_theme = 'simple'
    let g:airline_section_c = '%t'
    "let g:airline_section_gutter = ''
    "let g:airline_section_x = ' '
    "let g:airline_section_y = ' '

    """ Rooter
    "let g:rooter_patterns = ['.git/']
    let g:rooter_manual_only = 1

    " The Silver Searcher
    if executable('ag')
      " Use 'ag' instead of grep
      set grepprg=ag\ --nogroup\ --nocolor
      command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

      " Start a free-text search
      map \\ :silent Ag<SPACE>

      " Search for selection as literal string
      map \s "cy :silent Ag --literal "<C-R>c"<CR>

      " Search for word under cursor
      map \w :silent Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

      "Search from root of project
      let g:ag_working_path_mode = 'r'

      " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
      unlet g:ctrlp_user_command
      let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

      " ag is fast enough that CtrlP doesn't need to cache
      let g:ctrlp_use_caching = 0
    endif

    """ Ack
    map <leader>ack :Ack 


    """ CtrlP

    " Quick Search Tags
    map <C-f> :CtrlPTag<CR>
" }
